// <auto-generated />
using System;
using BeatEcoprove.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeatEcoprove.Infrastructure.Migrations
{
    [DbContext(typeof(BeatEcoproveDbContext))]
    [Migration("20240121165739_AddLevelUpTriggerNotification")]
    partial class AddLevelUpTriggerNotification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeatEcoprove.Domain.AuthAggregator.Auth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<Guid>("MainProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("main_profile_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.HasKey("Id");

                    b.ToTable("auths", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Bucket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("buckets", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Brand")
                        .HasColumnType("uuid")
                        .HasColumnName("brand");

                    b.Property<string>("ClothAvatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("cloth_avatar");

                    b.Property<Guid>("Color")
                        .HasColumnType("uuid")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Brand");

                    b.HasIndex("Color");

                    b.ToTable("cloths", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClothId")
                        .HasColumnType("uuid")
                        .HasColumnName("cloth_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<float>("DeltaScore")
                        .HasColumnType("real")
                        .HasColumnName("delta_score");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<float>("XP")
                        .HasColumnType("real")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("ClothId");

                    b.HasIndex("ProfileId");

                    b.ToTable("activities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<Guid>("MaintenanceService")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_service_id");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceService");

                    b.ToTable("maintenance_service_actions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("472a0b25-5b5a-4bf1-b5da-96c7d0d675b8"),
                            Badge = "public/default/wash/hand.png",
                            Description = "Lavar à mão com água e sabão",
                            EcoScore = 10,
                            MaintenanceService = new Guid("3ce29e6e-89a5-4700-8b09-2de656b13103"),
                            SustainablePoints = 100,
                            Title = "Lavar à mão"
                        },
                        new
                        {
                            Id = new Guid("a11a1abc-1ec4-4587-8c35-07a93371cd0a"),
                            Badge = "public/default/wash/less30.png",
                            Description = "Lavar a menos de 30ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("3ce29e6e-89a5-4700-8b09-2de656b13103"),
                            SustainablePoints = 100,
                            Title = "A menos de 30ºC"
                        },
                        new
                        {
                            Id = new Guid("0b98243f-f4ec-4ec4-9126-56c59a6b804d"),
                            Badge = "public/default/wash/less50.png",
                            Description = "Lavar a menos de 50ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("3ce29e6e-89a5-4700-8b09-2de656b13103"),
                            SustainablePoints = 100,
                            Title = "A menos de 50ºC"
                        },
                        new
                        {
                            Id = new Guid("f2802726-d963-409e-a9ed-caed80a4637c"),
                            Badge = "public/default/wash/less70.png",
                            Description = "Lavar a menos de 70ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("3ce29e6e-89a5-4700-8b09-2de656b13103"),
                            SustainablePoints = 100,
                            Title = "A menos de 70ºC"
                        },
                        new
                        {
                            Id = new Guid("a3898f19-4de1-414f-991f-357ce0000fac"),
                            Badge = "public/default/wash/less95.png",
                            Description = "Lavar a menos de 95ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("3ce29e6e-89a5-4700-8b09-2de656b13103"),
                            SustainablePoints = 100,
                            Title = "A menos de 95ºC"
                        },
                        new
                        {
                            Id = new Guid("5116d81b-2c83-427e-bcef-8c70c6f33668"),
                            Badge = "public/default/wash/dry.png",
                            Description = "Lavar a seco",
                            EcoScore = 10,
                            MaintenanceService = new Guid("3ce29e6e-89a5-4700-8b09-2de656b13103"),
                            SustainablePoints = 100,
                            Title = "A seco"
                        },
                        new
                        {
                            Id = new Guid("3ebad7bb-2b9b-452d-8a1d-fba0ad195a2e"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe uma lavandaria",
                            EcoScore = 10,
                            MaintenanceService = new Guid("3ce29e6e-89a5-4700-8b09-2de656b13103"),
                            SustainablePoints = 100,
                            Title = "Serviço de lavandaria"
                        },
                        new
                        {
                            Id = new Guid("3460d900-15ef-471a-9a06-f45a8086195e"),
                            Badge = "public/default/dry/air.png",
                            Description = "Secar ao ar livre",
                            EcoScore = 10,
                            MaintenanceService = new Guid("b6a455d6-593c-4941-969d-13d21705b92f"),
                            SustainablePoints = 100,
                            Title = "Ao ar livre"
                        },
                        new
                        {
                            Id = new Guid("e64f1fc9-f2d4-4492-b548-3c163a1257dc"),
                            Badge = "public/default/dry/machine.png",
                            Description = "Secar na máquina",
                            EcoScore = 10,
                            MaintenanceService = new Guid("b6a455d6-593c-4941-969d-13d21705b92f"),
                            SustainablePoints = 100,
                            Title = "Na máquina"
                        },
                        new
                        {
                            Id = new Guid("b525aa7a-8999-4480-8a03-d10e6b27a3a0"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de secagem",
                            EcoScore = 10,
                            MaintenanceService = new Guid("b6a455d6-593c-4941-969d-13d21705b92f"),
                            SustainablePoints = 100,
                            Title = "Serviço de Secagem"
                        },
                        new
                        {
                            Id = new Guid("2981afd0-c8aa-4926-8bda-bf71eb21892c"),
                            Badge = "public/default/iron/less110.png",
                            Description = "Engomar a menos de 110ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("973dadb9-b07a-46c2-91cc-55389686f2f2"),
                            SustainablePoints = 100,
                            Title = "A menos de 110ºC"
                        },
                        new
                        {
                            Id = new Guid("8eed3bef-0fd6-4c88-ac8c-078ef81ba4e4"),
                            Badge = "public/default/iron/less150.png",
                            Description = "Engomar a menos de 150ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("973dadb9-b07a-46c2-91cc-55389686f2f2"),
                            SustainablePoints = 100,
                            Title = "A menos de 150ºC"
                        },
                        new
                        {
                            Id = new Guid("b33c19da-363f-46c5-9353-71540f65b8f3"),
                            Badge = "public/default/iron/less200.png",
                            Description = "Engomar a menos de 200ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("973dadb9-b07a-46c2-91cc-55389686f2f2"),
                            SustainablePoints = 100,
                            Title = "A menos de 200ºC"
                        },
                        new
                        {
                            Id = new Guid("87ddae47-fd57-45a3-85e1-d15f125765b0"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de engomadoria",
                            EcoScore = 10,
                            MaintenanceService = new Guid("973dadb9-b07a-46c2-91cc-55389686f2f2"),
                            SustainablePoints = 100,
                            Title = "Serviço de Engomadoria"
                        },
                        new
                        {
                            Id = new Guid("7f15774a-6a78-425e-bf94-60acf1258e74"),
                            Badge = "public/default/repair.png",
                            Description = "Arranjar a peça pelo próprio",
                            EcoScore = 10,
                            MaintenanceService = new Guid("aa883287-24ee-42e9-b1cb-3122e99f4d8a"),
                            SustainablePoints = 100,
                            Title = "Pelo Próprio"
                        },
                        new
                        {
                            Id = new Guid("5af4f66a-a8e2-457d-a9d7-79d84cf1c909"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de Reparação",
                            EcoScore = 10,
                            MaintenanceService = new Guid("aa883287-24ee-42e9-b1cb-3122e99f4d8a"),
                            SustainablePoints = 100,
                            Title = "Serviço de Reparação"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("maintenance_services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ce29e6e-89a5-4700-8b09-2de656b13103"),
                            Badge = "public/default/wash.png",
                            Description = "De que forma pertende lavar?",
                            Title = "Lavar"
                        },
                        new
                        {
                            Id = new Guid("b6a455d6-593c-4941-969d-13d21705b92f"),
                            Badge = "public/default/dry.png",
                            Description = "De que forma pertende secar?",
                            Title = "Secar"
                        },
                        new
                        {
                            Id = new Guid("973dadb9-b07a-46c2-91cc-55389686f2f2"),
                            Badge = "public/default/iron.png",
                            Description = "De que forma pertende engomar?",
                            Title = "Engomar"
                        },
                        new
                        {
                            Id = new Guid("aa883287-24ee-42e9-b1cb-3122e99f4d8a"),
                            Badge = "public/default/repair.png",
                            Description = "De que forma pertende arranjar a peça?",
                            Title = "Engomar"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<Guid>("Profile")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Profile");

                    b.ToTable("group_members", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.TextMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Sender");

                    b.ToTable("group_text_messages", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarPicture")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("avatar_picture");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer")
                        .HasColumnName("members_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<double>("Xp")
                        .HasColumnType("double precision")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthId")
                        .HasColumnType("uuid")
                        .HasColumnName("auth_id");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EcoCoins")
                        .HasColumnType("integer")
                        .HasColumnName("eco_coins");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("SustainabilityPoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainability_points");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<double>("XP")
                        .HasColumnType("double precision")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("AuthId");

                    b.ToTable("profiles", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BrandAvatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("brand_avatar");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f386d60-27b9-4c0d-b13b-c01ba2729693"),
                            BrandAvatar = "...",
                            Name = "Salsa"
                        },
                        new
                        {
                            Id = new Guid("dc7fba3d-231b-4ef8-931f-c93c82a95365"),
                            BrandAvatar = "...",
                            Name = "MO"
                        },
                        new
                        {
                            Id = new Guid("b32b05ac-1531-4d8c-b6b9-f0b554ab557b"),
                            BrandAvatar = "...",
                            Name = "Tifosi"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Hex")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("hex");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2111157-54e8-4ee2-a3be-373a93451793"),
                            Hex = "FF000000",
                            Name = "Black"
                        },
                        new
                        {
                            Id = new Guid("278fee68-f717-4b1e-b693-65dd5eb3b7d2"),
                            Hex = "FFFFFFFF",
                            Name = "White"
                        },
                        new
                        {
                            Id = new Guid("1fa130a8-0514-4dcf-b4f6-3255ff3d033b"),
                            Hex = "FFFF0000",
                            Name = "Red"
                        },
                        new
                        {
                            Id = new Guid("82be98b3-e3e6-49f9-9748-83ca3ffe3379"),
                            Hex = "FF0000FF",
                            Name = "Blue"
                        },
                        new
                        {
                            Id = new Guid("b6fbda96-110a-4287-9b2a-153e2855865e"),
                            Hex = "FF00FF00",
                            Name = "Green"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity");

                    b.Property<int>("DailySequence")
                        .HasColumnType("integer")
                        .HasColumnName("daily_sequence");

                    b.Property<int>("PointsOfSustentability")
                        .HasColumnType("integer")
                        .HasColumnName("points_of_sustainability");

                    b.ToTable("daily_use_activities", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.HasIndex("ActionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("maintenance_activities", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Consumer", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile");

                    b.Property<DateOnly>("BornDate")
                        .HasColumnType("date")
                        .HasColumnName("born_date");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Organization", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile");

                    b.Property<int>("TypeOption")
                        .HasColumnType("integer")
                        .HasColumnName("type_option");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Bucket", b =>
                {
                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.BucketClothEntry", "BucketClothEntries", b1 =>
                        {
                            b1.Property<Guid>("BucketId")
                                .HasColumnType("uuid")
                                .HasColumnName("bucket_id");

                            b1.Property<Guid>("ClothId")
                                .HasColumnType("uuid")
                                .HasColumnName("cloth_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.HasKey("BucketId", "ClothId");

                            b1.HasIndex("ClothId");

                            b1.ToTable("bucket_cloths", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BucketId");

                            b1.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                                .WithMany()
                                .HasForeignKey("ClothId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("BucketClothEntries");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.Shared.Entities.Brand", null)
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.Shared.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("Color")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                        .WithMany("Activities")
                        .HasForeignKey("ClothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany("MaintenanceActions")
                        .HasForeignKey("MaintenanceService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("Members")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Profile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.TextMessage", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("TextMessages")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", null)
                        .WithMany()
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.AuthAggregator.Auth", null)
                        .WithMany()
                        .HasForeignKey("AuthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.BucketEntry", "BucketEntries", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("BucketId")
                                .HasColumnType("uuid")
                                .HasColumnName("bucket_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.Property<bool>("IsBlocked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_blocked");

                            b1.HasKey("ProfileId", "BucketId");

                            b1.ToTable("bucket_entries", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.ClothEntry", "ClothEntries", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("ClothId")
                                .HasColumnType("uuid")
                                .HasColumnName("cloth_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.Property<bool>("IsBlocked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_blocked");

                            b1.HasKey("ProfileId", "ClothId");

                            b1.HasIndex("ClothId");

                            b1.ToTable("cloth_entries", (string)null);

                            b1.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                                .WithMany()
                                .HasForeignKey("ClothId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("phone_country_code");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("phone");

                            b1.HasKey("ProfileId");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("BucketEntries");

                    b.Navigation("ClothEntries");

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", null)
                        .WithOne()
                        .HasForeignKey("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", null)
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", null)
                        .WithOne()
                        .HasForeignKey("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Organization", b =>
                {
                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Locality")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("locality");

                            b1.Property<int>("Port")
                                .HasColumnType("integer")
                                .HasColumnName("port");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("street");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");

                            b1.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.PostalCode", "PostalCode", b2 =>
                                {
                                    b2.Property<Guid>("AddressOrganizationId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("postal_code");

                                    b2.HasKey("AddressOrganizationId");

                                    b2.ToTable("profiles");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressOrganizationId");
                                });

                            b1.Navigation("PostalCode")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", b =>
                {
                    b.Navigation("MaintenanceActions");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("TextMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
