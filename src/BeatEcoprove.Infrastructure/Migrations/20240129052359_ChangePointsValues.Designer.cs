// <auto-generated />
using System;

using BeatEcoprove.Infrastructure.Persistence;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeatEcoprove.Infrastructure.Migrations
{
    [DbContext(typeof(BeatEcoproveDbContext))]
    [Migration("20240129052359_ChangePointsValues")]
    partial class ChangePointsValues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeatEcoprove.Domain.AuthAggregator.Auth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<Guid>("MainProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("main_profile_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.HasKey("Id");

                    b.ToTable("auths", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Bucket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("buckets", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Brand")
                        .HasColumnType("uuid")
                        .HasColumnName("brand");

                    b.Property<string>("ClothAvatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("cloth_avatar");

                    b.Property<Guid>("Color")
                        .HasColumnType("uuid")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Brand");

                    b.HasIndex("Color");

                    b.ToTable("cloths", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClothId")
                        .HasColumnType("uuid")
                        .HasColumnName("cloth_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<float>("DeltaScore")
                        .HasColumnType("real")
                        .HasColumnName("delta_score");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<float>("XP")
                        .HasColumnType("real")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("ClothId");

                    b.HasIndex("ProfileId");

                    b.ToTable("activities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<Guid>("MaintenanceService")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_service_id");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceService");

                    b.ToTable("maintenance_service_actions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7abba4c2-51ae-46ed-8b83-759317c2645a"),
                            Badge = "public/default/wash/hand.png",
                            Description = "Lavar à mão com água e sabão",
                            EcoScore = 10,
                            MaintenanceService = new Guid("e9f9fbc8-2d67-421a-9a23-a2338554c5ff"),
                            SustainablePoints = 100,
                            Title = "Lavar à mão"
                        },
                        new
                        {
                            Id = new Guid("28c4c7d1-82c3-4df1-88da-dbb0664150d5"),
                            Badge = "public/default/wash/less30.png",
                            Description = "Lavar a menos de 30ºC",
                            EcoScore = -1,
                            MaintenanceService = new Guid("e9f9fbc8-2d67-421a-9a23-a2338554c5ff"),
                            SustainablePoints = 2,
                            Title = "A menos de 30ºC"
                        },
                        new
                        {
                            Id = new Guid("1d1cd3af-5e75-4cd0-b5a5-3c6885408328"),
                            Badge = "public/default/wash/less50.png",
                            Description = "Lavar a menos de 50ºC",
                            EcoScore = -2,
                            MaintenanceService = new Guid("e9f9fbc8-2d67-421a-9a23-a2338554c5ff"),
                            SustainablePoints = 1,
                            Title = "A menos de 50ºC"
                        },
                        new
                        {
                            Id = new Guid("2b37e561-b195-413f-aa78-c55ff59d6131"),
                            Badge = "public/default/wash/less70.png",
                            Description = "Lavar a menos de 70ºC",
                            EcoScore = -2,
                            MaintenanceService = new Guid("e9f9fbc8-2d67-421a-9a23-a2338554c5ff"),
                            SustainablePoints = 1,
                            Title = "A menos de 70ºC"
                        },
                        new
                        {
                            Id = new Guid("cd5c932f-790a-4c68-9461-43b22bb7a308"),
                            Badge = "public/default/wash/less95.png",
                            Description = "Lavar a menos de 95ºC",
                            EcoScore = -2,
                            MaintenanceService = new Guid("e9f9fbc8-2d67-421a-9a23-a2338554c5ff"),
                            SustainablePoints = 1,
                            Title = "A menos de 95ºC"
                        },
                        new
                        {
                            Id = new Guid("0c749948-26f1-481e-b0f5-ee9d3d48ec58"),
                            Badge = "public/default/wash/dry.png",
                            Description = "Lavar a seco",
                            EcoScore = -3,
                            MaintenanceService = new Guid("e9f9fbc8-2d67-421a-9a23-a2338554c5ff"),
                            SustainablePoints = 0,
                            Title = "A seco"
                        },
                        new
                        {
                            Id = new Guid("7b491094-854e-4410-9d81-ce59e3696eab"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe uma lavandaria",
                            EcoScore = 10,
                            MaintenanceService = new Guid("e9f9fbc8-2d67-421a-9a23-a2338554c5ff"),
                            SustainablePoints = 100,
                            Title = "Serviço de lavandaria"
                        },
                        new
                        {
                            Id = new Guid("f0b200a6-0a45-4a15-8c80-11069340cbd1"),
                            Badge = "public/default/dry/air.png",
                            Description = "Secar ao ar livre",
                            EcoScore = 0,
                            MaintenanceService = new Guid("56723cfe-ad7e-42f9-a50d-d255d68eeb4d"),
                            SustainablePoints = 2,
                            Title = "Ao ar livre"
                        },
                        new
                        {
                            Id = new Guid("da7a9e18-cbe1-459d-aa07-f3ab23784b17"),
                            Badge = "public/default/dry/machine.png",
                            Description = "Secar na máquina",
                            EcoScore = -1,
                            MaintenanceService = new Guid("56723cfe-ad7e-42f9-a50d-d255d68eeb4d"),
                            SustainablePoints = 1,
                            Title = "Na máquina"
                        },
                        new
                        {
                            Id = new Guid("229e80a8-eb46-49da-a95f-5f73ff4d9d4d"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de secagem",
                            EcoScore = 10,
                            MaintenanceService = new Guid("56723cfe-ad7e-42f9-a50d-d255d68eeb4d"),
                            SustainablePoints = 100,
                            Title = "Serviço de Secagem"
                        },
                        new
                        {
                            Id = new Guid("aece55fb-e3da-41f8-a75f-d36fbc55171d"),
                            Badge = "public/default/iron/less110.png",
                            Description = "Engomar a menos de 110ºC",
                            EcoScore = -1,
                            MaintenanceService = new Guid("3182bec8-1946-4eb1-8e1b-20a855d81fb2"),
                            SustainablePoints = 1,
                            Title = "A menos de 110ºC"
                        },
                        new
                        {
                            Id = new Guid("a87dffc1-a8aa-47d1-a144-3729f1609532"),
                            Badge = "public/default/iron/less150.png",
                            Description = "Engomar a menos de 150ºC",
                            EcoScore = -1,
                            MaintenanceService = new Guid("3182bec8-1946-4eb1-8e1b-20a855d81fb2"),
                            SustainablePoints = 1,
                            Title = "A menos de 150ºC"
                        },
                        new
                        {
                            Id = new Guid("6476f332-e62e-454e-957f-0660ffb97c11"),
                            Badge = "public/default/iron/less200.png",
                            Description = "Engomar a menos de 200ºC",
                            EcoScore = -1,
                            MaintenanceService = new Guid("3182bec8-1946-4eb1-8e1b-20a855d81fb2"),
                            SustainablePoints = 1,
                            Title = "A menos de 200ºC"
                        },
                        new
                        {
                            Id = new Guid("49c7b4bf-9bcd-48e8-904d-e1c367c5d198"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de engomadoria",
                            EcoScore = 10,
                            MaintenanceService = new Guid("3182bec8-1946-4eb1-8e1b-20a855d81fb2"),
                            SustainablePoints = 100,
                            Title = "Serviço de Engomadoria"
                        },
                        new
                        {
                            Id = new Guid("71aef365-3fe2-428d-aedd-7432d45bfb61"),
                            Badge = "public/default/repair.png",
                            Description = "Arranjar a peça pelo próprio",
                            EcoScore = 2,
                            MaintenanceService = new Guid("97015a91-4db5-405f-b178-6f59e4e66b09"),
                            SustainablePoints = 3,
                            Title = "Pelo Próprio"
                        },
                        new
                        {
                            Id = new Guid("9172d102-6c59-4e76-91a0-5103bc4a0a9e"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de Reparação",
                            EcoScore = 10,
                            MaintenanceService = new Guid("97015a91-4db5-405f-b178-6f59e4e66b09"),
                            SustainablePoints = 100,
                            Title = "Serviço de Reparação"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("maintenance_services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9f9fbc8-2d67-421a-9a23-a2338554c5ff"),
                            Badge = "public/default/wash.png",
                            Description = "De que forma pretende lavar?",
                            Title = "Lavar"
                        },
                        new
                        {
                            Id = new Guid("56723cfe-ad7e-42f9-a50d-d255d68eeb4d"),
                            Badge = "public/default/dry.png",
                            Description = "De que forma pretende secar?",
                            Title = "Secar"
                        },
                        new
                        {
                            Id = new Guid("3182bec8-1946-4eb1-8e1b-20a855d81fb2"),
                            Badge = "public/default/iron.png",
                            Description = "De que forma pretende engomar?",
                            Title = "Engomar"
                        },
                        new
                        {
                            Id = new Guid("97015a91-4db5-405f-b178-6f59e4e66b09"),
                            Badge = "public/default/repair.png",
                            Description = "De que forma pretende arranjar a peça?",
                            Title = "Reparar"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeclinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("declined_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("Inviter")
                        .HasColumnType("uuid")
                        .HasColumnName("inviter_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<Guid>("Target")
                        .HasColumnType("uuid")
                        .HasColumnName("target_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Inviter");

                    b.HasIndex("Target");

                    b.ToTable("group_invites", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<Guid>("Profile")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Profile");

                    b.ToTable("group_members", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.TextMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Sender");

                    b.ToTable("group_text_messages", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarPicture")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("avatar_picture");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer")
                        .HasColumnName("members_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<double>("Xp")
                        .HasColumnType("double precision")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthId")
                        .HasColumnType("uuid")
                        .HasColumnName("auth_id");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EcoCoins")
                        .HasColumnType("integer")
                        .HasColumnName("eco_coins");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("SustainabilityPoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainability_points");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<double>("XP")
                        .HasColumnType("double precision")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("AuthId");

                    b.ToTable("profiles", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BrandAvatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("brand_avatar");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b5840b7-21a3-42d2-8d9f-1a6c6b835ec4"),
                            BrandAvatar = "public/default/brands/salsa.png",
                            Name = "Salsa"
                        },
                        new
                        {
                            Id = new Guid("8d4f9500-bdf7-4db8-88d4-cfdfb302d2b5"),
                            BrandAvatar = "public/default/brands/losan.png",
                            Name = "Losan"
                        },
                        new
                        {
                            Id = new Guid("7041b578-6dee-46f5-9306-5fa027a1e166"),
                            BrandAvatar = "public/default/brands/mo.png",
                            Name = "MO"
                        },
                        new
                        {
                            Id = new Guid("ff240300-99e1-4389-bebb-b48c77c30292"),
                            BrandAvatar = "public/default/brands/zippy.png",
                            Name = "Zippy"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Hex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("hex");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("356d8d64-133d-426a-a63a-3c5fba133aa8"),
                            Hex = "FF000000",
                            Name = "Black"
                        },
                        new
                        {
                            Id = new Guid("6f6234c6-0535-48d6-9f1f-56d9102a2e42"),
                            Hex = "FFFFFFFF",
                            Name = "White"
                        },
                        new
                        {
                            Id = new Guid("c43ea7f6-60a9-4de6-8421-30fa49092c1a"),
                            Hex = "FFFFE69F",
                            Name = "Amarelo"
                        },
                        new
                        {
                            Id = new Guid("d029fa9d-b36f-48b2-9d6f-38e64f5eaafc"),
                            Hex = "FF98B3C8",
                            Name = "Azul Claro"
                        },
                        new
                        {
                            Id = new Guid("3aaa255f-791c-4482-8c57-e2f8fecb4948"),
                            Hex = "FF29394A",
                            Name = "Azul Escuro"
                        },
                        new
                        {
                            Id = new Guid("dc9f773c-8da1-4e26-b10f-3c93e9a16cab"),
                            Hex = "FFF2E7D4",
                            Name = "Amarelo Bebê"
                        },
                        new
                        {
                            Id = new Guid("f81c3d10-ed70-4cb2-972f-b84beb1032a4"),
                            Hex = "FFC3A572",
                            Name = "Amarelo Claro"
                        },
                        new
                        {
                            Id = new Guid("bd73df8d-303e-482a-b6a6-07af0335f23c"),
                            Hex = "FFFF6D6D",
                            Name = "Vermelho Claro"
                        },
                        new
                        {
                            Id = new Guid("96638301-9a53-41a2-ac22-b5f1910a505d"),
                            Hex = "FF948066",
                            Name = "Castanho Claro"
                        },
                        new
                        {
                            Id = new Guid("e58b862e-d59f-478e-a558-ffa1b565d6af"),
                            Hex = "FF4A2D16",
                            Name = "Castanho"
                        },
                        new
                        {
                            Id = new Guid("affdf781-cd4a-4bc8-b77a-afe36a17d4d7"),
                            Hex = "FF4C4C4C",
                            Name = "Cinzento Claro"
                        },
                        new
                        {
                            Id = new Guid("6baac232-40e0-484c-aaa8-1e579705cf1d"),
                            Hex = "FFBE5967",
                            Name = "Rosa"
                        },
                        new
                        {
                            Id = new Guid("42129c13-4719-47c6-8830-e6324f7e3b3c"),
                            Hex = "FF8B5F3C",
                            Name = "Castanho Bebê"
                        },
                        new
                        {
                            Id = new Guid("6046b26a-333e-40ec-893c-7efe4fba453a"),
                            Hex = "FFF58221",
                            Name = "Laranja"
                        },
                        new
                        {
                            Id = new Guid("87d4305f-408f-4f26-b5ec-866fe84439c2"),
                            Hex = "FFD2AAC5",
                            Name = "Roxo Claro"
                        },
                        new
                        {
                            Id = new Guid("bd686168-159e-4d9b-b73e-f3d6d15cd7a1"),
                            Hex = "FFC0C0C0",
                            Name = "Cinzento Bebê"
                        },
                        new
                        {
                            Id = new Guid("f6e385c8-970f-4771-990c-2ff61d03099e"),
                            Hex = "FFF9C7C4",
                            Name = "Rosa Claro"
                        },
                        new
                        {
                            Id = new Guid("61c79c9e-de49-44db-bf2e-3d34a43314e0"),
                            Hex = "FFD62598",
                            Name = "Roxo"
                        },
                        new
                        {
                            Id = new Guid("1ef3600e-d043-41bf-adc7-fd15eeef1f02"),
                            Hex = "FF509C75",
                            Name = "Verde"
                        },
                        new
                        {
                            Id = new Guid("91ecca73-dd25-43e2-ae34-a81a5a578679"),
                            Hex = "FFC2BC8B",
                            Name = "Verde Lima"
                        },
                        new
                        {
                            Id = new Guid("0ad4a7d3-b69a-43d3-91bc-64600efca0d6"),
                            Hex = "FFDA252E",
                            Name = "Vermelho"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("Sender");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity");

                    b.Property<int>("DailySequence")
                        .HasColumnType("integer")
                        .HasColumnName("daily_sequence");

                    b.Property<int>("PointsOfSustentability")
                        .HasColumnType("integer")
                        .HasColumnName("points_of_sustainability");

                    b.ToTable("daily_use_activities", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.HasIndex("ActionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("maintenance_activities", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Consumer", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile");

                    b.Property<DateOnly>("BornDate")
                        .HasColumnType("date")
                        .HasColumnName("born_date");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Organization", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile");

                    b.Property<int>("TypeOption")
                        .HasColumnType("integer")
                        .HasColumnName("type_option");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Bucket", b =>
                {
                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.BucketClothEntry", "BucketClothEntries", b1 =>
                        {
                            b1.Property<Guid>("BucketId")
                                .HasColumnType("uuid")
                                .HasColumnName("bucket_id");

                            b1.Property<Guid>("ClothId")
                                .HasColumnType("uuid")
                                .HasColumnName("cloth_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.HasKey("BucketId", "ClothId");

                            b1.HasIndex("ClothId");

                            b1.ToTable("bucket_cloths", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BucketId");

                            b1.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                                .WithMany()
                                .HasForeignKey("ClothId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("BucketClothEntries");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.Shared.Entities.Brand", null)
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.Shared.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("Color")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                        .WithMany("Activities")
                        .HasForeignKey("ClothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany("MaintenanceActions")
                        .HasForeignKey("MaintenanceService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupInvite", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("Invites")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Inviter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Target")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("Members")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Profile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.TextMessage", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("TextMessages")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", null)
                        .WithMany()
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.AuthAggregator.Auth", null)
                        .WithMany()
                        .HasForeignKey("AuthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.BucketEntry", "BucketEntries", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("BucketId")
                                .HasColumnType("uuid")
                                .HasColumnName("bucket_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.Property<bool>("IsBlocked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_blocked");

                            b1.HasKey("ProfileId", "BucketId");

                            b1.ToTable("bucket_entries", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.ClothEntry", "ClothEntries", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("ClothId")
                                .HasColumnType("uuid")
                                .HasColumnName("cloth_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.Property<bool>("IsBlocked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_blocked");

                            b1.HasKey("ProfileId", "ClothId");

                            b1.HasIndex("ClothId");

                            b1.ToTable("cloth_entries", (string)null);

                            b1.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                                .WithMany()
                                .HasForeignKey("ClothId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("phone_country_code");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("phone");

                            b1.HasKey("ProfileId");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("BucketEntries");

                    b.Navigation("ClothEntries");

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.FeedBack", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", null)
                        .WithOne()
                        .HasForeignKey("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", null)
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", null)
                        .WithOne()
                        .HasForeignKey("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Organization", b =>
                {
                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Locality")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("locality");

                            b1.Property<int>("Port")
                                .HasColumnType("integer")
                                .HasColumnName("port");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("street");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");

                            b1.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.PostalCode", "PostalCode", b2 =>
                                {
                                    b2.Property<Guid>("AddressOrganizationId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("postal_code");

                                    b2.HasKey("AddressOrganizationId");

                                    b2.ToTable("profiles");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressOrganizationId");
                                });

                            b1.Navigation("PostalCode")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", b =>
                {
                    b.Navigation("MaintenanceActions");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("TextMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
