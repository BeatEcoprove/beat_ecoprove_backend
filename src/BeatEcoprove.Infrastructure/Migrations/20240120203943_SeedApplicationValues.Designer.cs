// <auto-generated />
using System;
using BeatEcoprove.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeatEcoprove.Infrastructure.Migrations
{
    [DbContext(typeof(BeatEcoproveDbContext))]
    [Migration("20240120203943_SeedApplicationValues")]
    partial class SeedApplicationValues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeatEcoprove.Domain.AuthAggregator.Auth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<Guid>("MainProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("main_profile_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.HasKey("Id");

                    b.ToTable("auths", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Bucket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("buckets", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Brand")
                        .HasColumnType("uuid")
                        .HasColumnName("brand");

                    b.Property<string>("ClothAvatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("cloth_avatar");

                    b.Property<Guid>("Color")
                        .HasColumnType("uuid")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Brand");

                    b.HasIndex("Color");

                    b.ToTable("cloths", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClothId")
                        .HasColumnType("uuid")
                        .HasColumnName("cloth_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<float>("DeltaScore")
                        .HasColumnType("real")
                        .HasColumnName("delta_score");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<float>("XP")
                        .HasColumnType("real")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("ClothId");

                    b.HasIndex("ProfileId");

                    b.ToTable("activities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<Guid>("MaintenanceService")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_service_id");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceService");

                    b.ToTable("maintenance_service_actions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e770e6d-fd87-467b-8cd6-20910c173810"),
                            Badge = "public/default/wash/hand.png",
                            Description = "Lavar à mão com água e sabão",
                            EcoScore = 10,
                            MaintenanceService = new Guid("53ecb0f0-bb77-4875-8563-17eac5e97780"),
                            SustainablePoints = 100,
                            Title = "Lavar à mão"
                        },
                        new
                        {
                            Id = new Guid("63a592a7-455e-4e9f-96c3-f031e5bacb02"),
                            Badge = "public/default/wash/less30.png",
                            Description = "Lavar a menos de 30ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("53ecb0f0-bb77-4875-8563-17eac5e97780"),
                            SustainablePoints = 100,
                            Title = "A menos de 30ºC"
                        },
                        new
                        {
                            Id = new Guid("7f6392e3-05fe-47da-a5f8-c9e24169dcd6"),
                            Badge = "public/default/wash/less50.png",
                            Description = "Lavar a menos de 50ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("53ecb0f0-bb77-4875-8563-17eac5e97780"),
                            SustainablePoints = 100,
                            Title = "A menos de 50ºC"
                        },
                        new
                        {
                            Id = new Guid("c0268528-a255-4e06-afab-ed35d53ecbf3"),
                            Badge = "public/default/wash/less70.png",
                            Description = "Lavar a menos de 70ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("53ecb0f0-bb77-4875-8563-17eac5e97780"),
                            SustainablePoints = 100,
                            Title = "A menos de 70ºC"
                        },
                        new
                        {
                            Id = new Guid("2b8c5d7a-1969-49b6-9385-80a5de0a89de"),
                            Badge = "public/default/wash/less95.png",
                            Description = "Lavar a menos de 95ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("53ecb0f0-bb77-4875-8563-17eac5e97780"),
                            SustainablePoints = 100,
                            Title = "A menos de 95ºC"
                        },
                        new
                        {
                            Id = new Guid("a9117518-3a74-4c45-bf58-38a47ab8a413"),
                            Badge = "public/default/wash/dry.png",
                            Description = "Lavar a seco",
                            EcoScore = 10,
                            MaintenanceService = new Guid("53ecb0f0-bb77-4875-8563-17eac5e97780"),
                            SustainablePoints = 100,
                            Title = "A seco"
                        },
                        new
                        {
                            Id = new Guid("336d12bc-ddc2-4cb8-bf6c-67f6f3c2ca8f"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe uma lavandaria",
                            EcoScore = 10,
                            MaintenanceService = new Guid("53ecb0f0-bb77-4875-8563-17eac5e97780"),
                            SustainablePoints = 100,
                            Title = "Serviço de lavandaria"
                        },
                        new
                        {
                            Id = new Guid("8176c49f-eaed-445f-8312-24fa0765d160"),
                            Badge = "public/default/dry/air.png",
                            Description = "Secar ao ar livre",
                            EcoScore = 10,
                            MaintenanceService = new Guid("fa98a556-80d0-4dc3-a905-479e40f5030f"),
                            SustainablePoints = 100,
                            Title = "Ao ar livre"
                        },
                        new
                        {
                            Id = new Guid("e3d43c5f-a303-40e7-80bc-b9d7a59ebe09"),
                            Badge = "public/default/dry/machine.png",
                            Description = "Secar na máquina",
                            EcoScore = 10,
                            MaintenanceService = new Guid("fa98a556-80d0-4dc3-a905-479e40f5030f"),
                            SustainablePoints = 100,
                            Title = "Na máquina"
                        },
                        new
                        {
                            Id = new Guid("56b181b9-4c80-45e1-aef3-956f69bb739d"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de secagem",
                            EcoScore = 10,
                            MaintenanceService = new Guid("fa98a556-80d0-4dc3-a905-479e40f5030f"),
                            SustainablePoints = 100,
                            Title = "Serviço de Secagem"
                        },
                        new
                        {
                            Id = new Guid("c479d878-fb33-4335-a78c-77c8d76803d9"),
                            Badge = "public/default/iron/less110.png",
                            Description = "Engomar a menos de 110ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0eaefa43-2687-44ee-b3fb-527db9eb5dad"),
                            SustainablePoints = 100,
                            Title = "A menos de 110ºC"
                        },
                        new
                        {
                            Id = new Guid("b76d9710-f953-4f55-9435-eb43fde8ae9b"),
                            Badge = "public/default/iron/less150.png",
                            Description = "Engomar a menos de 150ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0eaefa43-2687-44ee-b3fb-527db9eb5dad"),
                            SustainablePoints = 100,
                            Title = "A menos de 150ºC"
                        },
                        new
                        {
                            Id = new Guid("35b3eeae-294f-4c7f-9f40-8bc43982f740"),
                            Badge = "public/default/iron/less200.png",
                            Description = "Engomar a menos de 200ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0eaefa43-2687-44ee-b3fb-527db9eb5dad"),
                            SustainablePoints = 100,
                            Title = "A menos de 200ºC"
                        },
                        new
                        {
                            Id = new Guid("3fc683e7-4b82-4319-af20-3c6ce2fb27fb"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de engomadoria",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0eaefa43-2687-44ee-b3fb-527db9eb5dad"),
                            SustainablePoints = 100,
                            Title = "Serviço de Engomadoria"
                        },
                        new
                        {
                            Id = new Guid("724cb8f9-a04d-47b6-b8a2-de44ea2780e8"),
                            Badge = "public/default/repair.png",
                            Description = "Arranjar a peça pelo próprio",
                            EcoScore = 10,
                            MaintenanceService = new Guid("8e8ecf6e-7301-4f8a-9b5d-00768daade36"),
                            SustainablePoints = 100,
                            Title = "Pelo Próprio"
                        },
                        new
                        {
                            Id = new Guid("a980f950-7749-47f1-8eb5-c8b2e369531a"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de Reparação",
                            EcoScore = 10,
                            MaintenanceService = new Guid("8e8ecf6e-7301-4f8a-9b5d-00768daade36"),
                            SustainablePoints = 100,
                            Title = "Serviço de Reparação"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("maintenance_services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("53ecb0f0-bb77-4875-8563-17eac5e97780"),
                            Badge = "public/default/wash.png",
                            Description = "De que forma pertende lavar?",
                            Title = "Lavar"
                        },
                        new
                        {
                            Id = new Guid("fa98a556-80d0-4dc3-a905-479e40f5030f"),
                            Badge = "public/default/dry.png",
                            Description = "De que forma pertende secar?",
                            Title = "Secar"
                        },
                        new
                        {
                            Id = new Guid("0eaefa43-2687-44ee-b3fb-527db9eb5dad"),
                            Badge = "public/default/iron.png",
                            Description = "De que forma pertende engomar?",
                            Title = "Engomar"
                        },
                        new
                        {
                            Id = new Guid("8e8ecf6e-7301-4f8a-9b5d-00768daade36"),
                            Badge = "public/default/repair.png",
                            Description = "De que forma pertende arranjar a peça?",
                            Title = "Engomar"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<Guid>("Profile")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Profile");

                    b.ToTable("group_members", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.TextMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Sender");

                    b.ToTable("group_text_messages", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarPicture")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("avatar_picture");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer")
                        .HasColumnName("members_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<double>("Xp")
                        .HasColumnType("double precision")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthId")
                        .HasColumnType("uuid")
                        .HasColumnName("auth_id");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EcoCoins")
                        .HasColumnType("integer")
                        .HasColumnName("eco_coins");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("SustainabilityPoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainability_points");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<double>("XP")
                        .HasColumnType("double precision")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("AuthId");

                    b.ToTable("profiles", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BrandAvatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("brand_avatar");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1440c3d-3f28-47dc-a202-c185272b1dbe"),
                            BrandAvatar = "...",
                            Name = "Salsa"
                        },
                        new
                        {
                            Id = new Guid("36ce016d-b9de-48b0-a0d8-35d4f9501c62"),
                            BrandAvatar = "...",
                            Name = "MO"
                        },
                        new
                        {
                            Id = new Guid("e3b3eddf-3037-4402-8ced-ff721c35481e"),
                            BrandAvatar = "...",
                            Name = "Tifosi"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Hex")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("hex");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("76eb11ce-11f7-4eef-850d-767443cb261f"),
                            Hex = "FF000000",
                            Name = "Black"
                        },
                        new
                        {
                            Id = new Guid("e774cb84-ca95-4430-8610-d93aa57bd7d0"),
                            Hex = "FFFFFFFF",
                            Name = "White"
                        },
                        new
                        {
                            Id = new Guid("db467672-13bc-4e6f-8e68-dd1defc71f9c"),
                            Hex = "FFFF0000",
                            Name = "Red"
                        },
                        new
                        {
                            Id = new Guid("a94faae1-9c32-4418-b9e6-e02d8efbe1b7"),
                            Hex = "FF0000FF",
                            Name = "Blue"
                        },
                        new
                        {
                            Id = new Guid("5d5155a4-9bad-425f-8444-a2c65291db07"),
                            Hex = "FF00FF00",
                            Name = "Green"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity");

                    b.Property<int>("DailySequence")
                        .HasColumnType("integer")
                        .HasColumnName("daily_sequence");

                    b.Property<int>("PointsOfSustentability")
                        .HasColumnType("integer")
                        .HasColumnName("points_of_sustainability");

                    b.ToTable("daily_use_activities", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.HasIndex("ActionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("maintenance_activities", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Consumer", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile");

                    b.Property<DateOnly>("BornDate")
                        .HasColumnType("date")
                        .HasColumnName("born_date");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Organization", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile");

                    b.Property<int>("TypeOption")
                        .HasColumnType("integer")
                        .HasColumnName("type_option");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Bucket", b =>
                {
                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.BucketClothEntry", "BucketClothEntries", b1 =>
                        {
                            b1.Property<Guid>("BucketId")
                                .HasColumnType("uuid")
                                .HasColumnName("bucket_id");

                            b1.Property<Guid>("ClothId")
                                .HasColumnType("uuid")
                                .HasColumnName("cloth_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.HasKey("BucketId", "ClothId");

                            b1.HasIndex("ClothId");

                            b1.ToTable("bucket_cloths", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BucketId");

                            b1.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                                .WithMany()
                                .HasForeignKey("ClothId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("BucketClothEntries");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.Shared.Entities.Brand", null)
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.Shared.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("Color")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                        .WithMany("Activities")
                        .HasForeignKey("ClothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany("MaintenanceActions")
                        .HasForeignKey("MaintenanceService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("Members")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Profile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.TextMessage", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("TextMessages")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", null)
                        .WithMany()
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.AuthAggregator.Auth", null)
                        .WithMany()
                        .HasForeignKey("AuthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.BucketEntry", "BucketEntries", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("BucketId")
                                .HasColumnType("uuid")
                                .HasColumnName("bucket_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.Property<bool>("IsBlocked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_blocked");

                            b1.HasKey("ProfileId", "BucketId");

                            b1.ToTable("bucket_entries", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.ClothEntry", "ClothEntries", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("ClothId")
                                .HasColumnType("uuid")
                                .HasColumnName("cloth_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.Property<bool>("IsBlocked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_blocked");

                            b1.HasKey("ProfileId", "ClothId");

                            b1.HasIndex("ClothId");

                            b1.ToTable("cloth_entries", (string)null);

                            b1.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                                .WithMany()
                                .HasForeignKey("ClothId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("phone_country_code");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("phone");

                            b1.HasKey("ProfileId");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("BucketEntries");

                    b.Navigation("ClothEntries");

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", null)
                        .WithOne()
                        .HasForeignKey("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", null)
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", null)
                        .WithOne()
                        .HasForeignKey("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Organization", b =>
                {
                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Locality")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("locality");

                            b1.Property<int>("Port")
                                .HasColumnType("integer")
                                .HasColumnName("port");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("street");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");

                            b1.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.PostalCode", "PostalCode", b2 =>
                                {
                                    b2.Property<Guid>("AddressOrganizationId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("postal_code");

                                    b2.HasKey("AddressOrganizationId");

                                    b2.ToTable("profiles");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressOrganizationId");
                                });

                            b1.Navigation("PostalCode")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", b =>
                {
                    b.Navigation("MaintenanceActions");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("TextMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
