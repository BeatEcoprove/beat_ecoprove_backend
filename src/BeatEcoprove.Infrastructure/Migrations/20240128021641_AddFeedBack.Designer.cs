// <auto-generated />
using System;

using BeatEcoprove.Infrastructure.Persistence;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeatEcoprove.Infrastructure.Migrations
{
    [DbContext(typeof(BeatEcoproveDbContext))]
    [Migration("20240128021641_AddFeedBack")]
    partial class AddFeedBack
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeatEcoprove.Domain.AuthAggregator.Auth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<Guid>("MainProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("main_profile_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.HasKey("Id");

                    b.ToTable("auths", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Bucket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("buckets", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Brand")
                        .HasColumnType("uuid")
                        .HasColumnName("brand");

                    b.Property<string>("ClothAvatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("cloth_avatar");

                    b.Property<Guid>("Color")
                        .HasColumnType("uuid")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Brand");

                    b.HasIndex("Color");

                    b.ToTable("cloths", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClothId")
                        .HasColumnType("uuid")
                        .HasColumnName("cloth_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<float>("DeltaScore")
                        .HasColumnType("real")
                        .HasColumnName("delta_score");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<float>("XP")
                        .HasColumnType("real")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("ClothId");

                    b.HasIndex("ProfileId");

                    b.ToTable("activities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<Guid>("MaintenanceService")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_service_id");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceService");

                    b.ToTable("maintenance_service_actions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("47046061-3afb-4848-a281-b57e1eb0574a"),
                            Badge = "public/default/wash/hand.png",
                            Description = "Lavar à mão com água e sabão",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0a912017-037a-4387-bb48-f81cb00ee2ca"),
                            SustainablePoints = 100,
                            Title = "Lavar à mão"
                        },
                        new
                        {
                            Id = new Guid("347a08be-9246-49a3-a53a-116d5de74c45"),
                            Badge = "public/default/wash/less30.png",
                            Description = "Lavar a menos de 30ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0a912017-037a-4387-bb48-f81cb00ee2ca"),
                            SustainablePoints = 100,
                            Title = "A menos de 30ºC"
                        },
                        new
                        {
                            Id = new Guid("13b00c78-04ea-42f4-8454-ee69696a4830"),
                            Badge = "public/default/wash/less50.png",
                            Description = "Lavar a menos de 50ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0a912017-037a-4387-bb48-f81cb00ee2ca"),
                            SustainablePoints = 100,
                            Title = "A menos de 50ºC"
                        },
                        new
                        {
                            Id = new Guid("513a3d39-74bb-453f-a612-4046fac9fc89"),
                            Badge = "public/default/wash/less70.png",
                            Description = "Lavar a menos de 70ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0a912017-037a-4387-bb48-f81cb00ee2ca"),
                            SustainablePoints = 100,
                            Title = "A menos de 70ºC"
                        },
                        new
                        {
                            Id = new Guid("7cb3c017-17b1-4f1e-8282-5084669fe86e"),
                            Badge = "public/default/wash/less95.png",
                            Description = "Lavar a menos de 95ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0a912017-037a-4387-bb48-f81cb00ee2ca"),
                            SustainablePoints = 100,
                            Title = "A menos de 95ºC"
                        },
                        new
                        {
                            Id = new Guid("e3d8ffac-8a67-4baf-ad8b-ea2066477d12"),
                            Badge = "public/default/wash/dry.png",
                            Description = "Lavar a seco",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0a912017-037a-4387-bb48-f81cb00ee2ca"),
                            SustainablePoints = 100,
                            Title = "A seco"
                        },
                        new
                        {
                            Id = new Guid("bb30e2ff-5615-4547-ad99-5c78783c0935"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe uma lavandaria",
                            EcoScore = 10,
                            MaintenanceService = new Guid("0a912017-037a-4387-bb48-f81cb00ee2ca"),
                            SustainablePoints = 100,
                            Title = "Serviço de lavandaria"
                        },
                        new
                        {
                            Id = new Guid("803cab24-050d-4ded-a376-496834ec7ac5"),
                            Badge = "public/default/dry/air.png",
                            Description = "Secar ao ar livre",
                            EcoScore = 10,
                            MaintenanceService = new Guid("29ba13a8-bb75-44b9-8703-3f6379eb81d3"),
                            SustainablePoints = 100,
                            Title = "Ao ar livre"
                        },
                        new
                        {
                            Id = new Guid("32a8b41c-a3de-4db3-abb7-0d1cb6972a4e"),
                            Badge = "public/default/dry/machine.png",
                            Description = "Secar na máquina",
                            EcoScore = 10,
                            MaintenanceService = new Guid("29ba13a8-bb75-44b9-8703-3f6379eb81d3"),
                            SustainablePoints = 100,
                            Title = "Na máquina"
                        },
                        new
                        {
                            Id = new Guid("d1c3fef6-fba5-422b-bc0b-37660512bff1"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de secagem",
                            EcoScore = 10,
                            MaintenanceService = new Guid("29ba13a8-bb75-44b9-8703-3f6379eb81d3"),
                            SustainablePoints = 100,
                            Title = "Serviço de Secagem"
                        },
                        new
                        {
                            Id = new Guid("ea2ad035-d372-43d5-b30e-15b3b9759881"),
                            Badge = "public/default/iron/less110.png",
                            Description = "Engomar a menos de 110ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("1faa30c0-8ee3-4084-944d-2cbd8c669c16"),
                            SustainablePoints = 100,
                            Title = "A menos de 110ºC"
                        },
                        new
                        {
                            Id = new Guid("8a85a7c6-a9c2-4a93-b970-3001ef5d4fbb"),
                            Badge = "public/default/iron/less150.png",
                            Description = "Engomar a menos de 150ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("1faa30c0-8ee3-4084-944d-2cbd8c669c16"),
                            SustainablePoints = 100,
                            Title = "A menos de 150ºC"
                        },
                        new
                        {
                            Id = new Guid("125893b0-f0ac-484f-b2cc-d232db32145f"),
                            Badge = "public/default/iron/less200.png",
                            Description = "Engomar a menos de 200ºC",
                            EcoScore = 10,
                            MaintenanceService = new Guid("1faa30c0-8ee3-4084-944d-2cbd8c669c16"),
                            SustainablePoints = 100,
                            Title = "A menos de 200ºC"
                        },
                        new
                        {
                            Id = new Guid("5a59cc3e-1839-4ebe-829a-922fb5342289"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de engomadoria",
                            EcoScore = 10,
                            MaintenanceService = new Guid("1faa30c0-8ee3-4084-944d-2cbd8c669c16"),
                            SustainablePoints = 100,
                            Title = "Serviço de Engomadoria"
                        },
                        new
                        {
                            Id = new Guid("89ea57e1-342f-4923-8065-1c0dcdc266ba"),
                            Badge = "public/default/repair.png",
                            Description = "Arranjar a peça pelo próprio",
                            EcoScore = 10,
                            MaintenanceService = new Guid("89632620-3f8f-476c-a977-796f50696c8d"),
                            SustainablePoints = 100,
                            Title = "Pelo Próprio"
                        },
                        new
                        {
                            Id = new Guid("f8c2c544-18d1-4edd-820f-16e2d228efe4"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de Reparação",
                            EcoScore = 10,
                            MaintenanceService = new Guid("89632620-3f8f-476c-a977-796f50696c8d"),
                            SustainablePoints = 100,
                            Title = "Serviço de Reparação"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("maintenance_services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a912017-037a-4387-bb48-f81cb00ee2ca"),
                            Badge = "public/default/wash.png",
                            Description = "De que forma pertende lavar?",
                            Title = "Lavar"
                        },
                        new
                        {
                            Id = new Guid("29ba13a8-bb75-44b9-8703-3f6379eb81d3"),
                            Badge = "public/default/dry.png",
                            Description = "De que forma pertende secar?",
                            Title = "Secar"
                        },
                        new
                        {
                            Id = new Guid("1faa30c0-8ee3-4084-944d-2cbd8c669c16"),
                            Badge = "public/default/iron.png",
                            Description = "De que forma pertende engomar?",
                            Title = "Engomar"
                        },
                        new
                        {
                            Id = new Guid("89632620-3f8f-476c-a977-796f50696c8d"),
                            Badge = "public/default/repair.png",
                            Description = "De que forma pertende arranjar a peça?",
                            Title = "Reparar"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeclinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("declined_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("Inviter")
                        .HasColumnType("uuid")
                        .HasColumnName("inviter_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<Guid>("Target")
                        .HasColumnType("uuid")
                        .HasColumnName("target_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Inviter");

                    b.HasIndex("Target");

                    b.ToTable("group_invites", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<Guid>("Profile")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Profile");

                    b.ToTable("group_members", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.TextMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Sender");

                    b.ToTable("group_text_messages", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarPicture")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("avatar_picture");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer")
                        .HasColumnName("members_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<double>("Xp")
                        .HasColumnType("double precision")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthId")
                        .HasColumnType("uuid")
                        .HasColumnName("auth_id");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EcoCoins")
                        .HasColumnType("integer")
                        .HasColumnName("eco_coins");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("SustainabilityPoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainability_points");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<double>("XP")
                        .HasColumnType("double precision")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("AuthId");

                    b.ToTable("profiles", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BrandAvatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("brand_avatar");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9aeec63-3220-42d0-a045-7a8239d9582e"),
                            BrandAvatar = "...",
                            Name = "Salsa"
                        },
                        new
                        {
                            Id = new Guid("72ebdcd9-4d9f-4911-8a70-84f7e8d08079"),
                            BrandAvatar = "...",
                            Name = "MO"
                        },
                        new
                        {
                            Id = new Guid("cf98502f-54a9-410b-bdf8-e6f79e635de4"),
                            BrandAvatar = "...",
                            Name = "Tifosi"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Hex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("hex");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0f4bbd9-4ec5-47c8-9eaa-6b192190106b"),
                            Hex = "FF000000",
                            Name = "Black"
                        },
                        new
                        {
                            Id = new Guid("2dd686e7-8598-4352-9f8e-9e2f392d3eaf"),
                            Hex = "FFFFFFFF",
                            Name = "White"
                        },
                        new
                        {
                            Id = new Guid("003685cc-db4f-4f8e-b99c-0747e53965ba"),
                            Hex = "FFFFE69F",
                            Name = "Amarelo"
                        },
                        new
                        {
                            Id = new Guid("49b4e34d-6f76-4560-96c4-573075a2fb26"),
                            Hex = "FF98B3C8",
                            Name = "Azul Claro"
                        },
                        new
                        {
                            Id = new Guid("90b31ed8-59f4-414f-87d2-027aeddc6722"),
                            Hex = "FF29394A",
                            Name = "Azul Escuro"
                        },
                        new
                        {
                            Id = new Guid("1868efde-5e58-4533-a266-957f81c0cec2"),
                            Hex = "FFF2E7D4",
                            Name = "Amarelo Bebê"
                        },
                        new
                        {
                            Id = new Guid("c7282c01-5cf1-4434-9c2b-d9b2e0effa85"),
                            Hex = "FFC3A572",
                            Name = "Amarelo Claro"
                        },
                        new
                        {
                            Id = new Guid("8f0cb390-b665-4e3c-8266-a6d43c392bf6"),
                            Hex = "FFFF6D6D",
                            Name = "Vermelho Claro"
                        },
                        new
                        {
                            Id = new Guid("58e4291e-1f2d-4783-beb8-cd5cb8034866"),
                            Hex = "FF948066",
                            Name = "Castanho Claro"
                        },
                        new
                        {
                            Id = new Guid("d339b83f-dd89-440f-9c98-50adbe848ae9"),
                            Hex = "FF4A2D16",
                            Name = "Castanho"
                        },
                        new
                        {
                            Id = new Guid("7d5eec0f-86b0-4b11-b336-41d2b31b081a"),
                            Hex = "FF4C4C4C",
                            Name = "Cinzento Claro"
                        },
                        new
                        {
                            Id = new Guid("137de7c2-7340-4997-af40-8a3c72e97868"),
                            Hex = "FFBE5967",
                            Name = "Rosa"
                        },
                        new
                        {
                            Id = new Guid("4c3b6209-9872-4c30-99f0-4d1398c16d14"),
                            Hex = "FF8B5F3C",
                            Name = "Castanho Bebê"
                        },
                        new
                        {
                            Id = new Guid("fc796230-5458-4fff-8956-d2467a6ec769"),
                            Hex = "FFF58221",
                            Name = "Laranja"
                        },
                        new
                        {
                            Id = new Guid("6117d603-2d02-4365-9148-60066d2d6ebb"),
                            Hex = "FFD2AAC5",
                            Name = "Roxo Claro"
                        },
                        new
                        {
                            Id = new Guid("ce9b77b2-4923-4be3-8a10-7b61a8f2925b"),
                            Hex = "FFC0C0C0",
                            Name = "Cinzento Bebê"
                        },
                        new
                        {
                            Id = new Guid("0cb02dcb-85f1-41b0-ac14-c5696fd044e0"),
                            Hex = "FFF9C7C4",
                            Name = "Rosa Claro"
                        },
                        new
                        {
                            Id = new Guid("3eb4ba0c-ca6e-45d5-b23c-2b74bc45a9cf"),
                            Hex = "FFD62598",
                            Name = "Roxo"
                        },
                        new
                        {
                            Id = new Guid("6aea3d42-1667-4dfe-8fbe-4934e6cf385a"),
                            Hex = "FF509C75",
                            Name = "Verde"
                        },
                        new
                        {
                            Id = new Guid("cbb3d13e-35b3-46ee-81cf-515a51d49164"),
                            Hex = "FFC2BC8B",
                            Name = "Verde Lima"
                        },
                        new
                        {
                            Id = new Guid("c5ddcae0-d5cb-4505-948f-737af834e2ea"),
                            Hex = "FFDA252E",
                            Name = "Vermelho"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("Sender");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity");

                    b.Property<int>("DailySequence")
                        .HasColumnType("integer")
                        .HasColumnName("daily_sequence");

                    b.Property<int>("PointsOfSustentability")
                        .HasColumnType("integer")
                        .HasColumnName("points_of_sustainability");

                    b.ToTable("daily_use_activities", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.HasIndex("ActionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("maintenance_activities", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Consumer", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile");

                    b.Property<DateOnly>("BornDate")
                        .HasColumnType("date")
                        .HasColumnName("born_date");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Organization", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile");

                    b.Property<int>("TypeOption")
                        .HasColumnType("integer")
                        .HasColumnName("type_option");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Bucket", b =>
                {
                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.BucketClothEntry", "BucketClothEntries", b1 =>
                        {
                            b1.Property<Guid>("BucketId")
                                .HasColumnType("uuid")
                                .HasColumnName("bucket_id");

                            b1.Property<Guid>("ClothId")
                                .HasColumnType("uuid")
                                .HasColumnName("cloth_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.HasKey("BucketId", "ClothId");

                            b1.HasIndex("ClothId");

                            b1.ToTable("bucket_cloths", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BucketId");

                            b1.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                                .WithMany()
                                .HasForeignKey("ClothId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("BucketClothEntries");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.Shared.Entities.Brand", null)
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.Shared.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("Color")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                        .WithMany("Activities")
                        .HasForeignKey("ClothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany("MaintenanceActions")
                        .HasForeignKey("MaintenanceService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupInvite", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("Invites")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Inviter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Target")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("Members")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Profile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.TextMessage", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("TextMessages")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", null)
                        .WithMany()
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.AuthAggregator.Auth", null)
                        .WithMany()
                        .HasForeignKey("AuthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.BucketEntry", "BucketEntries", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("BucketId")
                                .HasColumnType("uuid")
                                .HasColumnName("bucket_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.Property<bool>("IsBlocked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_blocked");

                            b1.HasKey("ProfileId", "BucketId");

                            b1.ToTable("bucket_entries", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.ClothEntry", "ClothEntries", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("ClothId")
                                .HasColumnType("uuid")
                                .HasColumnName("cloth_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.Property<bool>("IsBlocked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_blocked");

                            b1.HasKey("ProfileId", "ClothId");

                            b1.HasIndex("ClothId");

                            b1.ToTable("cloth_entries", (string)null);

                            b1.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                                .WithMany()
                                .HasForeignKey("ClothId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("phone_country_code");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("phone");

                            b1.HasKey("ProfileId");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("BucketEntries");

                    b.Navigation("ClothEntries");

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.FeedBack", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", null)
                        .WithOne()
                        .HasForeignKey("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", null)
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", null)
                        .WithOne()
                        .HasForeignKey("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Organization", b =>
                {
                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Locality")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("locality");

                            b1.Property<int>("Port")
                                .HasColumnType("integer")
                                .HasColumnName("port");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("street");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");

                            b1.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.PostalCode", "PostalCode", b2 =>
                                {
                                    b2.Property<Guid>("AddressOrganizationId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("postal_code");

                                    b2.HasKey("AddressOrganizationId");

                                    b2.ToTable("profiles");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressOrganizationId");
                                });

                            b1.Navigation("PostalCode")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", b =>
                {
                    b.Navigation("MaintenanceActions");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("TextMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
