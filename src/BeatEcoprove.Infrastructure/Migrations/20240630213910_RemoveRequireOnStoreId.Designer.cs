// <auto-generated />
using System;
using BeatEcoprove.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeatEcoprove.Infrastructure.Migrations
{
    [DbContext(typeof(BeatEcoproveDbContext))]
    [Migration("20240630213910_RemoveRequireOnStoreId")]
    partial class RemoveRequireOnStoreId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_topology");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeatEcoprove.Domain.AdvertisementAggregator.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uuid")
                        .HasColumnName("creator");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTimeOffset>("InitDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("init_date");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("picture");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.ToTable("advertisements", (string)null);

                    b.HasDiscriminator<int>("Type").HasValue(1);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.AuthAggregator.Auth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<Guid>("MainProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("main_profile_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.HasKey("Id");

                    b.ToTable("auths", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Bucket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("buckets", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Brand")
                        .HasColumnType("uuid")
                        .HasColumnName("brand");

                    b.Property<string>("ClothAvatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("cloth_avatar");

                    b.Property<Guid>("Color")
                        .HasColumnType("uuid")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Brand");

                    b.HasIndex("Color");

                    b.ToTable("cloths", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClothId")
                        .HasColumnType("uuid")
                        .HasColumnName("cloth_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<float>("DeltaScore")
                        .HasColumnType("real")
                        .HasColumnName("delta_score");

                    b.Property<DateTimeOffset?>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<float>("XP")
                        .HasColumnType("real")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("ClothId");

                    b.HasIndex("ProfileId");

                    b.ToTable("activities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<Guid>("MaintenanceService")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_service_id");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceService");

                    b.ToTable("maintenance_service_actions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fe1ebce-0e77-4e6f-b847-f4332c5bea60"),
                            Badge = "public/default/wash/hand.png",
                            Description = "Lavar à mão com água e sabão",
                            EcoScore = 10,
                            MaintenanceService = new Guid("fea92981-527b-44f0-a782-f03331998d3b"),
                            SustainablePoints = 100,
                            Title = "Lavar à mão"
                        },
                        new
                        {
                            Id = new Guid("a2495f78-ae7b-4eb7-b85f-51f1aedd668c"),
                            Badge = "public/default/wash/less30.png",
                            Description = "Lavar a menos de 30ºC",
                            EcoScore = -1,
                            MaintenanceService = new Guid("fea92981-527b-44f0-a782-f03331998d3b"),
                            SustainablePoints = 2,
                            Title = "A menos de 30ºC"
                        },
                        new
                        {
                            Id = new Guid("451fe20e-6d7a-41e8-a413-73e8a2091113"),
                            Badge = "public/default/wash/less50.png",
                            Description = "Lavar a menos de 50ºC",
                            EcoScore = -2,
                            MaintenanceService = new Guid("fea92981-527b-44f0-a782-f03331998d3b"),
                            SustainablePoints = 1,
                            Title = "A menos de 50ºC"
                        },
                        new
                        {
                            Id = new Guid("3cfc740e-334e-43e6-a561-893b4712ea80"),
                            Badge = "public/default/wash/less70.png",
                            Description = "Lavar a menos de 70ºC",
                            EcoScore = -2,
                            MaintenanceService = new Guid("fea92981-527b-44f0-a782-f03331998d3b"),
                            SustainablePoints = 1,
                            Title = "A menos de 70ºC"
                        },
                        new
                        {
                            Id = new Guid("6f45fef6-a548-4754-b326-8b6463405c20"),
                            Badge = "public/default/wash/less95.png",
                            Description = "Lavar a menos de 95ºC",
                            EcoScore = -2,
                            MaintenanceService = new Guid("fea92981-527b-44f0-a782-f03331998d3b"),
                            SustainablePoints = 1,
                            Title = "A menos de 95ºC"
                        },
                        new
                        {
                            Id = new Guid("ecbd01e7-3322-4c0a-9c08-5eae2beda57e"),
                            Badge = "public/default/wash/dry.png",
                            Description = "Lavar a seco",
                            EcoScore = -3,
                            MaintenanceService = new Guid("fea92981-527b-44f0-a782-f03331998d3b"),
                            SustainablePoints = 0,
                            Title = "A seco"
                        },
                        new
                        {
                            Id = new Guid("5eacc778-611c-43ab-947a-34d056636eb4"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe uma lavandaria",
                            EcoScore = 10,
                            MaintenanceService = new Guid("fea92981-527b-44f0-a782-f03331998d3b"),
                            SustainablePoints = 100,
                            Title = "Serviço de lavandaria"
                        },
                        new
                        {
                            Id = new Guid("075d10d9-0041-4458-af69-d3e8961e4e59"),
                            Badge = "public/default/dry/air.png",
                            Description = "Secar ao ar livre",
                            EcoScore = 0,
                            MaintenanceService = new Guid("f81b87a0-29be-4d56-b1e8-5b507c6a91a0"),
                            SustainablePoints = 2,
                            Title = "Ao ar livre"
                        },
                        new
                        {
                            Id = new Guid("16e95161-cb63-45af-ab7c-75b13e145b2e"),
                            Badge = "public/default/dry/machine.png",
                            Description = "Secar na máquina",
                            EcoScore = -1,
                            MaintenanceService = new Guid("f81b87a0-29be-4d56-b1e8-5b507c6a91a0"),
                            SustainablePoints = 1,
                            Title = "Na máquina"
                        },
                        new
                        {
                            Id = new Guid("810a231d-cd08-43cd-8c83-5c102f42f118"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de secagem",
                            EcoScore = 10,
                            MaintenanceService = new Guid("f81b87a0-29be-4d56-b1e8-5b507c6a91a0"),
                            SustainablePoints = 100,
                            Title = "Serviço de Secagem"
                        },
                        new
                        {
                            Id = new Guid("d52569d4-9097-4e06-ad3e-a21df000f00b"),
                            Badge = "public/default/iron/less110.png",
                            Description = "Engomar a menos de 110ºC",
                            EcoScore = -1,
                            MaintenanceService = new Guid("942edccf-f09f-48ed-aaf8-471217bb8978"),
                            SustainablePoints = 1,
                            Title = "A menos de 110ºC"
                        },
                        new
                        {
                            Id = new Guid("d7ab3e0a-e18d-462d-a4bd-17e1c7d0f889"),
                            Badge = "public/default/iron/less150.png",
                            Description = "Engomar a menos de 150ºC",
                            EcoScore = -1,
                            MaintenanceService = new Guid("942edccf-f09f-48ed-aaf8-471217bb8978"),
                            SustainablePoints = 1,
                            Title = "A menos de 150ºC"
                        },
                        new
                        {
                            Id = new Guid("51e4a6ea-1004-486a-82ea-6afcbe619943"),
                            Badge = "public/default/iron/less200.png",
                            Description = "Engomar a menos de 200ºC",
                            EcoScore = -1,
                            MaintenanceService = new Guid("942edccf-f09f-48ed-aaf8-471217bb8978"),
                            SustainablePoints = 1,
                            Title = "A menos de 200ºC"
                        },
                        new
                        {
                            Id = new Guid("66bf88d5-a99d-45f5-bf4d-c36870e33342"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de engomadoria",
                            EcoScore = 10,
                            MaintenanceService = new Guid("942edccf-f09f-48ed-aaf8-471217bb8978"),
                            SustainablePoints = 100,
                            Title = "Serviço de Engomadoria"
                        },
                        new
                        {
                            Id = new Guid("74afd84f-e817-4aec-ab89-5d11c32955da"),
                            Badge = "public/default/repair.png",
                            Description = "Arranjar a peça pelo próprio",
                            EcoScore = 2,
                            MaintenanceService = new Guid("23db32c4-9e98-434a-8b9b-e50a6b4ecf71"),
                            SustainablePoints = 3,
                            Title = "Pelo Próprio"
                        },
                        new
                        {
                            Id = new Guid("2b3ebd1c-f96b-4c2d-86fd-14521f438691"),
                            Badge = "public/default/service.png",
                            Description = "Escolhe um serviço de Reparação",
                            EcoScore = 10,
                            MaintenanceService = new Guid("23db32c4-9e98-434a-8b9b-e50a6b4ecf71"),
                            SustainablePoints = 100,
                            Title = "Serviço de Reparação"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("badge");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("maintenance_services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fea92981-527b-44f0-a782-f03331998d3b"),
                            Badge = "public/default/wash.png",
                            Description = "De que forma pretende lavar?",
                            Title = "Lavar"
                        },
                        new
                        {
                            Id = new Guid("f81b87a0-29be-4d56-b1e8-5b507c6a91a0"),
                            Badge = "public/default/dry.png",
                            Description = "De que forma pretende secar?",
                            Title = "Secar"
                        },
                        new
                        {
                            Id = new Guid("942edccf-f09f-48ed-aaf8-471217bb8978"),
                            Badge = "public/default/iron.png",
                            Description = "De que forma pretende engomar?",
                            Title = "Engomar"
                        },
                        new
                        {
                            Id = new Guid("23db32c4-9e98-434a-8b9b-e50a6b4ecf71"),
                            Badge = "public/default/repair.png",
                            Description = "De que forma pretende arranjar a peça?",
                            Title = "Reparar"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeclinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("declined_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("Inviter")
                        .HasColumnType("uuid")
                        .HasColumnName("inviter_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<Guid>("Target")
                        .HasColumnType("uuid")
                        .HasColumnName("target_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Inviter");

                    b.HasIndex("Target");

                    b.ToTable("group_invites", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("Group")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<Guid>("Profile")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("Profile");

                    b.ToTable("group_members", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarPicture")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("avatar_picture");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer")
                        .HasColumnName("members_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.Property<double>("Xp")
                        .HasColumnType("double precision")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthId")
                        .HasColumnType("uuid")
                        .HasColumnName("auth_id");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EcoCoins")
                        .HasColumnType("integer")
                        .HasColumnName("eco_coins");

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("SustainabilityPoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainability_points");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<double>("XP")
                        .HasColumnType("double precision")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.HasIndex("AuthId");

                    b.ToTable("profiles", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BrandAvatar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("brand_avatar");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("298bfa53-cc2e-4876-8761-71af6b299ff8"),
                            BrandAvatar = "public/default/brands/salsa.png",
                            Name = "Salsa"
                        },
                        new
                        {
                            Id = new Guid("be9f14ae-5f69-47eb-b426-1736b7cafafe"),
                            BrandAvatar = "public/default/brands/losan.png",
                            Name = "Losan"
                        },
                        new
                        {
                            Id = new Guid("2f6f9a18-2b69-4d0e-bc9a-176c7b08607e"),
                            BrandAvatar = "public/default/brands/mo.png",
                            Name = "MO"
                        },
                        new
                        {
                            Id = new Guid("95e718b5-533e-44ca-b1e4-c724701ae1d7"),
                            BrandAvatar = "public/default/brands/zippy.png",
                            Name = "Zippy"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Hex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("hex");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16292f3b-76d2-4b50-ab4e-92de2b592b41"),
                            Hex = "FF000000",
                            Name = "Black"
                        },
                        new
                        {
                            Id = new Guid("c6e6efc0-f16a-4931-a4c6-fc92d5a7dad3"),
                            Hex = "FFFFFFFF",
                            Name = "White"
                        },
                        new
                        {
                            Id = new Guid("46fb1a51-d814-4bd6-a376-8e18bdbf7224"),
                            Hex = "FFFFE69F",
                            Name = "Amarelo"
                        },
                        new
                        {
                            Id = new Guid("7b8690e2-8cf1-4b43-8c7a-da47682062fe"),
                            Hex = "FF98B3C8",
                            Name = "Azul Claro"
                        },
                        new
                        {
                            Id = new Guid("4b92f17a-4a50-4899-96a8-737a179f3890"),
                            Hex = "FF29394A",
                            Name = "Azul Escuro"
                        },
                        new
                        {
                            Id = new Guid("65a4a941-58f1-4181-b687-e606150c37bb"),
                            Hex = "FFF2E7D4",
                            Name = "Amarelo Bebê"
                        },
                        new
                        {
                            Id = new Guid("50677230-1e2f-4dc3-9708-cd786bb815c5"),
                            Hex = "FFC3A572",
                            Name = "Amarelo Claro"
                        },
                        new
                        {
                            Id = new Guid("20b135e4-4e0b-4dfc-93a1-f93536e9c648"),
                            Hex = "FFFF6D6D",
                            Name = "Vermelho Claro"
                        },
                        new
                        {
                            Id = new Guid("f42b7cd4-cc93-4ad9-bba4-a5884614e499"),
                            Hex = "FF948066",
                            Name = "Castanho Claro"
                        },
                        new
                        {
                            Id = new Guid("5d719aa9-4b7d-4c05-a14d-6f986088af87"),
                            Hex = "FF4A2D16",
                            Name = "Castanho"
                        },
                        new
                        {
                            Id = new Guid("6f004ead-ac04-4cef-bf9e-a11492a1cd56"),
                            Hex = "FF4C4C4C",
                            Name = "Cinzento Claro"
                        },
                        new
                        {
                            Id = new Guid("c5b30e63-9fd4-48b8-aef6-cfa67de063e6"),
                            Hex = "FFBE5967",
                            Name = "Rosa"
                        },
                        new
                        {
                            Id = new Guid("7bcc70f3-b57c-412d-a9d6-ae2aa1789e8f"),
                            Hex = "FF8B5F3C",
                            Name = "Castanho Bebê"
                        },
                        new
                        {
                            Id = new Guid("ced8221f-cc95-4e2c-b5a1-323ae57aa992"),
                            Hex = "FFF58221",
                            Name = "Laranja"
                        },
                        new
                        {
                            Id = new Guid("ab83331f-bd1a-4083-b4e6-a58b4aa21aed"),
                            Hex = "FFD2AAC5",
                            Name = "Roxo Claro"
                        },
                        new
                        {
                            Id = new Guid("fff2fd3a-1f7d-404f-8fd7-0c16e8ee64a4"),
                            Hex = "FFC0C0C0",
                            Name = "Cinzento Bebê"
                        },
                        new
                        {
                            Id = new Guid("2a1a4fc3-de1c-419b-bf3c-fda466092409"),
                            Hex = "FFF9C7C4",
                            Name = "Rosa Claro"
                        },
                        new
                        {
                            Id = new Guid("74350af4-390b-47e3-b4a7-c5984ff8791a"),
                            Hex = "FFD62598",
                            Name = "Roxo"
                        },
                        new
                        {
                            Id = new Guid("bb58aec9-bad1-4081-ad5e-9e4c2dc937d4"),
                            Hex = "FF509C75",
                            Name = "Verde"
                        },
                        new
                        {
                            Id = new Guid("cc478c8a-e196-4856-803c-98a071f25e93"),
                            Hex = "FFC2BC8B",
                            Name = "Verde Lima"
                        },
                        new
                        {
                            Id = new Guid("bbf5b09d-d6a3-43b6-81c7-6cf2fa2f2648"),
                            Hex = "FFDA252E",
                            Name = "Vermelho"
                        });
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("Sender");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<Guid>("AssignedWorker")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_worker");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uuid")
                        .HasColumnName("owner");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("Store")
                        .HasColumnType("uuid")
                        .HasColumnName("store");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AssignedWorker");

                    b.HasIndex("Owner");

                    b.HasIndex("Store");

                    b.ToTable("store_orders", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.Rating", b =>
                {
                    b.Property<Guid>("Store")
                        .HasColumnType("uuid")
                        .HasColumnName("store");

                    b.Property<Guid>("User")
                        .HasColumnType("uuid")
                        .HasColumnName("user");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("PublishAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publish_at");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.HasKey("Store", "User");

                    b.HasIndex("User");

                    b.ToTable("store_ratings", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.ServiceEntry", b =>
                {
                    b.Property<Guid>("Order")
                        .HasColumnType("uuid")
                        .HasColumnName("order");

                    b.Property<Guid>("Service")
                        .HasColumnType("uuid")
                        .HasColumnName("service");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.HasKey("Order", "Service");

                    b.HasIndex("Service");

                    b.ToTable("orders_maintenance_services", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("ExitAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exit_at");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<Guid>("Profile")
                        .HasColumnType("uuid")
                        .HasColumnName("profile");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("Store")
                        .HasColumnType("uuid")
                        .HasColumnName("store");

                    b.HasKey("Id");

                    b.HasIndex("Profile");

                    b.HasIndex("Store");

                    b.ToTable("workers", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<Point>("Localization")
                        .IsRequired()
                        .HasColumnType("geography (point)")
                        .HasColumnName("localization");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uuid")
                        .HasColumnName("owner");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("picture");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.HasKey("Id");

                    b.HasIndex("Owner");

                    b.ToTable("stores", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.AdvertisementAggregator.Entities.Promotion", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.AdvertisementAggregator.Advertisement");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.AdvertisementAggregator.Entities.Voucher", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.AdvertisementAggregator.Advertisement");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity");

                    b.Property<int>("DailySequence")
                        .HasColumnType("integer")
                        .HasColumnName("daily_sequence");

                    b.Property<int>("PointsOfSustentability")
                        .HasColumnType("integer")
                        .HasColumnName("points_of_sustainability");

                    b.ToTable("daily_use_activities", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<int>("SustainablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("sustainable_points");

                    b.HasIndex("ActionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("maintenance_activities", (string)null);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Consumer", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile");

                    b.Property<DateOnly>("BornDate")
                        .HasColumnType("date")
                        .HasColumnName("born_date");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Organization", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile");

                    b.Property<int>("TypeOption")
                        .HasColumnType("integer")
                        .HasColumnName("type_option");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.OrderBucket", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.StoreAggregator.Entities.Order");

                    b.Property<Guid>("Bucket")
                        .HasColumnType("uuid")
                        .HasColumnName("bucket");

                    b.HasIndex("Bucket");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.OrderCloth", b =>
                {
                    b.HasBaseType("BeatEcoprove.Domain.StoreAggregator.Entities.Order");

                    b.Property<Guid>("Cloth")
                        .HasColumnType("uuid")
                        .HasColumnName("cloth");

                    b.HasIndex("Cloth");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BeatEcoprove.Domain.AdvertisementAggregator.Advertisement", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Creator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Bucket", b =>
                {
                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.BucketClothEntry", "BucketClothEntries", b1 =>
                        {
                            b1.Property<Guid>("BucketId")
                                .HasColumnType("uuid")
                                .HasColumnName("bucket_id");

                            b1.Property<Guid>("ClothId")
                                .HasColumnType("uuid")
                                .HasColumnName("cloth_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.HasKey("BucketId", "ClothId");

                            b1.HasIndex("ClothId");

                            b1.ToTable("bucket_cloths", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BucketId");

                            b1.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                                .WithMany()
                                .HasForeignKey("ClothId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("BucketClothEntries");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.Shared.Entities.Brand", null)
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.Shared.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("Color")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                        .WithMany("Activities")
                        .HasForeignKey("ClothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany("MaintenanceActions")
                        .HasForeignKey("MaintenanceService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupInvite", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("Invites")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Inviter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Target")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Entities.GroupMember", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.GroupAggregator.Group", null)
                        .WithMany("Members")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Profile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.AuthAggregator.Auth", null)
                        .WithMany()
                        .HasForeignKey("AuthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.BucketEntry", "BucketEntries", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("BucketId")
                                .HasColumnType("uuid")
                                .HasColumnName("bucket_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.Property<bool>("IsBlocked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_blocked");

                            b1.HasKey("ProfileId", "BucketId");

                            b1.ToTable("bucket_entries", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsMany("BeatEcoprove.Domain.ProfileAggregator.Entities.Cloths.ClothEntry", "ClothEntries", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_id");

                            b1.Property<Guid>("ClothId")
                                .HasColumnType("uuid")
                                .HasColumnName("cloth_id");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("deleted_at");

                            b1.Property<bool>("IsBlocked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_blocked");

                            b1.HasKey("ProfileId", "ClothId");

                            b1.HasIndex("ClothId");

                            b1.ToTable("cloth_entries", (string)null);

                            b1.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                                .WithMany()
                                .HasForeignKey("ClothId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("phone_country_code");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("phone");

                            b1.HasKey("ProfileId");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("BucketEntries");

                    b.Navigation("ClothEntries");

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.Shared.Entities.FeedBack", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.Order", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.StoreAggregator.Entities.Worker", null)
                        .WithMany()
                        .HasForeignKey("AssignedWorker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.StoreAggregator.Store", null)
                        .WithMany("Orders")
                        .HasForeignKey("Store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.Rating", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.StoreAggregator.Store", null)
                        .WithMany("Ratings")
                        .HasForeignKey("Store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.ServiceEntry", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.StoreAggregator.Entities.Order", null)
                        .WithMany("Services")
                        .HasForeignKey("Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany()
                        .HasForeignKey("Service")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.Worker", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Profile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.StoreAggregator.Store", null)
                        .WithMany("Workers")
                        .HasForeignKey("Store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Store", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("Owner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Locality")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("locality");

                            b1.Property<int>("Port")
                                .HasColumnType("integer")
                                .HasColumnName("port");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("street");

                            b1.HasKey("StoreId");

                            b1.ToTable("stores");

                            b1.WithOwner()
                                .HasForeignKey("StoreId");

                            b1.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.PostalCode", "PostalCode", b2 =>
                                {
                                    b2.Property<Guid>("AddressStoreId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("postal_code");

                                    b2.HasKey("AddressStoreId");

                                    b2.ToTable("stores");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressStoreId");
                                });

                            b1.Navigation("PostalCode")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", null)
                        .WithOne()
                        .HasForeignKey("BeatEcoprove.Domain.ClosetAggregator.Entities.DailyUseActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceAction", null)
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.Activity", null)
                        .WithOne()
                        .HasForeignKey("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ProfileAggregator.Entities.Profiles.Organization", b =>
                {
                    b.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Locality")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("locality");

                            b1.Property<int>("Port")
                                .HasColumnType("integer")
                                .HasColumnName("port");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("street");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");

                            b1.OwnsOne("BeatEcoprove.Domain.ProfileAggregator.ValueObjects.PostalCode", "PostalCode", b2 =>
                                {
                                    b2.Property<Guid>("AddressOrganizationId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("postal_code");

                                    b2.HasKey("AddressOrganizationId");

                                    b2.ToTable("profiles");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressOrganizationId");
                                });

                            b1.Navigation("PostalCode")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.OrderBucket", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Bucket", null)
                        .WithMany()
                        .HasForeignKey("Bucket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.OrderCloth", b =>
                {
                    b.HasOne("BeatEcoprove.Domain.ClosetAggregator.Cloth", null)
                        .WithMany()
                        .HasForeignKey("Cloth")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Cloth", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.ClosetAggregator.Entities.MaintenanceService", b =>
                {
                    b.Navigation("MaintenanceActions");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.GroupAggregator.Group", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Entities.Order", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BeatEcoprove.Domain.StoreAggregator.Store", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");

                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
