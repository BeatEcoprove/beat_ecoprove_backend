version: '3.7'

services:
  nginx:
    container_name: nginx
    image: nginx:stable-alpine
    env_file:
      - .env
    ports:
      - "${NGINX_HTTP_PORT}:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-build
    profiles:
      - build

  mongo:
    container_name: mongo
    image: mongo:latest
    env_file:
      - .env
    volumes:
      - ./docker/mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "${MONGO_PORT}:27017"
    profiles:
      - build
      - dev

  redis:
    container_name: redis
    image: redis/redis-stack:latest
    ports:
      - "${REDIS_PORT}:6379"
      - "${REDIS_PORT_INTERFACE}:8001"
    profiles:
      - build
      - dev

  database:
    image: postgres:alpine3.18
    ports:
      - ${POSTGRES_PORT}:5432
    env_file:
      - .env
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - build
      - dev

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    ports:
      - ${BEAT_API_REST_PORT}:80
    env_file:
      - .env
    environment:
      - MONGO_HOST=mongo
      - POSTGRES_HOST=database
      - REDIS_HOST=redis
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    profiles:
      - dev

  api-build:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    env_file:
      - .env
    environment:
      - MONGO_HOST=mongo
      - POSTGRES_HOST=database
      - REDIS_HOST=redis
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    profiles:
      - build
