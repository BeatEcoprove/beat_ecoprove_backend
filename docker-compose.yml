version: '3.7'

services:
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - prometheus_data:/etc/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - api-build
    profiles:
      - build

  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
    depends_on:
      - prometheus
    profiles:
      - build

  nginx:
    container_name: nginx
    image: nginx:stable-alpine
    env_file:
      - .env
    ports:
      - "${NGINX_HTTP_PORT}:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-build
    profiles:
      - build

  redis-build:
    container_name: redis
    image: redis:latest
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:6379"
    profiles:
      - build

  api-build:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    env_file:
      - .env
    environment:
      - MONGO_HOST=mongo
      - POSTGRES_HOST=database
      - REDIS_HOST=redis
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      database:
        condition: service_healthy
      redis-build:
        condition: service_started
    restart: always
    profiles:
      - build

  database:
    image: postgres:alpine3.18
    ports:
      - ${POSTGRES_PORT}:5432
    env_file:
      - .env
    restart: always
    volumes:
      - database_data:/var/lib/postgresql/shared-data/
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - build
      - dev

  mongo:
    container_name: mongo
    image: mongo:latest
    env_file:
      - .env
    volumes:
      - ./docker/mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongo_data:/data/db
    ports:
      - "${MONGO_PORT}:27017"
    profiles:
      - build
      - dev

  redis:
    container_name: redis
    image: redis/redis-stack:latest
    ports:
      - "${REDIS_PORT}:6379"
      - "${REDIS_PORT_INTERFACE}:8001"
    profiles:
      - dev

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    ports:
      - ${BEAT_API_REST_PORT}:80
    env_file:
      - .env
    environment:
      - MONGO_HOST=mongo
      - POSTGRES_HOST=database
      - REDIS_HOST=redis
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    profiles:
      - dev

volumes:
  grafana_data:
  redis_data:
  prometheus_data:
  mongo_data:
  database_data:
